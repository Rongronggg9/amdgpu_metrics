#!/usr/bin/gawk -f

# Copyright (C) 2025  Rongrong <i@rong.moe>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see
# <https://www.gnu.org/licenses/>.

function err(s) {
	print s > "/dev/stderr";
	exit 1;
}

function add_line(s) {
	if (s == "") {
		print "";
		return;
	}
	for (i = 0; i < INDENT; i++)
		printf "\t";
	print s;
}

function add_printf(all, comment) {
	add_line("printf(" all ");" comment);
}

function add_dump_line(name, disp_var, comment) {
	if (disp_var == "")
		disp_var = "\"" name "\"";
	# All known members are unsigned. Cast them to ULL so that they can share the same fmt.
	add_printf(sprintf("__tableFormat, %s, (unsigned long long)%s->%s", disp_var, "metrics", name), comment);
}

function add_dump_substruct(substruct, member, disp_var, comment) {
	if (disp_var == "")
		disp_var = "\"" member " {\"";
	dump_func = FUNC_PREFIX substruct;
	add_printf("__subStructFormat, \"" substruct "\", " disp_var, comment);
	add_line(dump_func "(&metrics->" member ");" comment);
	add_printf("__subStructFormat, \"\", \"}\"", comment);
}

BEGIN {
	PROCINFO["sorted_in"] = "@ind_str_asc";
	STRUCT_NAME = "";
	INDENT = 0;
	BUF_SIZE = 64;
	FUNC_PREFIX = "__dump_";
	add_line("/* This file is auto-generated by gen_dump_gpu_metrics_h.awk. */");
	add_line();
	add_line("#include <stdio.h>");
	add_line("#include \"dump_gpu_metrics.h\"");
	add_line();
	add_line("static const char __tableHeader[] =")
	add_line("\"|              Name              |      Value      |\\n\"");
	add_line("\"|--------------------------------|-----------------|\\n\";");
	add_line("static const char __tableFormat[] = \"| %-30s | %15llu |\\n\";");
	add_line("static const char __subStructFormat[] = \"| %-30s | %-15s |\\n\";");
}

match($0, /^struct (gpu_metrics_v([0-9]+)_([0-9]+)|amdgpu_xcp_metrics\w*|metrics_table_header)\s*\{/, arr) {
	if (STRUCT_NAME != "")
		err("Unexpected nested struct definition!");
	STRUCT_NAME = arr[1]; fr = arr[2]; cr = arr[3];
	func_name = FUNC_PREFIX STRUCT_NAME;
	if (fr != "" && cr != "")
		REV_MAP[fr, cr] = STRUCT_NAME;
	add_line();
	add_line("static void " func_name "(const struct " STRUCT_NAME " *metrics)");
	add_line("{"); INDENT++;
	add_line("char __attribute__((unused)) buf[" BUF_SIZE "] = \"\";");
	add_line();
}

# This may be too strict, but it works (TM)
STRUCT_NAME != "" && match($0, /(u?int[0-9]+_t|struct\s+\w+)\s+(\w+)(\[\w+?])?;(.*)/, arr) {
	substruct = "";
	if (match(arr[1], /^struct\s+(\w+)/, sar))
		substruct = sar[1];
	else if (arr[1] ~ /^i/)
		err("Signed types are not supported yet!");
	member = arr[2]; len = substr(arr[3], 2, length(arr[3]) - 2); comment = arr[4];
	if (len == "") {
		if (substruct != "")
			add_dump_substruct(substruct, member, "", comment);
		else
			add_dump_line(member, "", comment);
	} else {
		add_line("for (unsigned i = 0; i < " len "; i++)");
		add_line("{"); INDENT++;
		template = sprintf("%s[%%u]%s", member, substruct != "" ? " {" : "");
		# 10 for %u, 3 for [] and null terminator
		if (BUF_SIZE - length(member) - 10 - 3 < 0)
			err("Potential buffer overflow");
		add_line("sprintf(buf, \"" template "\", i);");
		if (substruct != "")
			add_dump_substruct(substruct, member "[i]", "buf", comment);
		else
			add_dump_line(member "[i]", "buf", comment);
		INDENT--; add_line("}");
	}
}

STRUCT_NAME != "" && match($0, /^\s*(\/\/.*|\/\*.*\*\/)\s*$/, arr) {
	add_line(arr[1]);
}

STRUCT_NAME != "" && /^\s*$/ {
	add_line();
}

STRUCT_NAME != "" && /^};$/ {
	if (STRUCT_NAME == "")
		err("Struct definition not started!");
	STRUCT_NAME = "";
	INDENT--;
	add_line("}");
}

END {
	add_line();
	add_line("int dump_gpu_metrics(const void *metrics)");
	add_line("{"); INDENT++;
	add_line("struct metrics_table_header *header = (struct metrics_table_header *)metrics;");
	add_line();
	add_printf("__tableHeader");
	add_line();
	add_line("switch ((header->format_revision << 8) | header->content_revision)");
	add_line("{");
	for (combined in REV_MAP) {
		split(combined, rev, SUBSEP); fr = rev[1]; cr = rev[2]; struct_name = REV_MAP[combined];
		add_line("case (" fr " << 8) | " cr ":");
		INDENT++;
		add_line(FUNC_PREFIX struct_name "((struct " struct_name " *)metrics);");
		add_line("break;");
		INDENT--;
	}
	add_line("default:");
	INDENT++; add_line("return -1;"); INDENT--;
	add_line("}");
	add_line("return 0;")
	INDENT--; add_line("}");
}
